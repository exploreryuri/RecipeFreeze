"""Upgrade schemas

Revision ID: 00ac9aaf771b
Revises: 
Create Date: 2025-08-20 20:24:15.434540

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '00ac9aaf771b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('expiry_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('add_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)
    op.drop_table('ingredients')
    op.drop_index(op.f('ix_fav_recipe_id'), table_name='favorite_recipes')
    op.drop_index(op.f('ix_fav_user_id'), table_name='favorite_recipes')
    op.drop_table('favorite_recipes')
    op.drop_index(op.f('ix_ri_ingredient_id'), table_name='recipe_ingredients')
    op.drop_index(op.f('ix_ri_recipe_id'), table_name='recipe_ingredients')
    op.drop_table('recipe_ingredients')
    op.drop_index(op.f('ix_user_products_user_id'), table_name='user_products')
    op.drop_table('user_products')
    op.add_column('recipes', sa.Column('name', sa.String(), nullable=True))
    op.add_column('recipes', sa.Column('photo', sa.String(), nullable=True))
    op.add_column('recipes', sa.Column('ingredients', sa.String(), nullable=True))
    op.add_column('recipes', sa.Column('time', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_recipes_id'), 'recipes', ['id'], unique=False)
    op.create_index(op.f('ix_recipes_name'), 'recipes', ['name'], unique=False)
    op.drop_column('recipes', 'description')
    op.drop_column('recipes', 'cook_time_min')
    op.drop_column('recipes', 'title')
    op.drop_column('recipes', 'created_at')
    op.drop_column('recipes', 'views')
    op.drop_column('recipes', 'category')
    op.drop_column('recipes', 'instructions')
    op.drop_column('recipes', 'image_url')
    op.add_column('users', sa.Column('password', sa.String(), nullable=True))
    op.drop_index(op.f('ix_users_uid'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'uid')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('uid', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('ix_users_uid'), 'users', ['uid'], unique=True)
    op.drop_column('users', 'password')
    op.add_column('recipes', sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('recipes', sa.Column('instructions', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('recipes', sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('recipes', sa.Column('views', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('recipes', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('recipes', sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('recipes', sa.Column('cook_time_min', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('recipes', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_recipes_name'), table_name='recipes')
    op.drop_index(op.f('ix_recipes_id'), table_name='recipes')
    op.drop_column('recipes', 'time')
    op.drop_column('recipes', 'ingredients')
    op.drop_column('recipes', 'photo')
    op.drop_column('recipes', 'name')
    op.create_table('user_products',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('expiration_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('added_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_products_user_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_products_pkey'))
    )
    op.create_index(op.f('ix_user_products_user_id'), 'user_products', ['user_id'], unique=False)
    op.create_table('recipe_ingredients',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('recipe_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ingredient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.id'], name=op.f('recipe_ingredients_ingredient_id_fkey')),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], name=op.f('recipe_ingredients_recipe_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('recipe_ingredients_pkey')),
    sa.UniqueConstraint('recipe_id', 'ingredient_id', name=op.f('uq_recipe_ingredient'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_ri_recipe_id'), 'recipe_ingredients', ['recipe_id'], unique=False)
    op.create_index(op.f('ix_ri_ingredient_id'), 'recipe_ingredients', ['ingredient_id'], unique=False)
    op.create_table('favorite_recipes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recipe_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('added_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], name=op.f('favorite_recipes_recipe_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('favorite_recipes_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('favorite_recipes_pkey')),
    sa.UniqueConstraint('user_id', 'recipe_id', name=op.f('uq_fav_user_recipe'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_fav_user_id'), 'favorite_recipes', ['user_id'], unique=False)
    op.create_index(op.f('ix_fav_recipe_id'), 'favorite_recipes', ['recipe_id'], unique=False)
    op.create_table('ingredients',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('ingredients_pkey')),
    sa.UniqueConstraint('name', name=op.f('ingredients_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_index(op.f('ix_products_id'), table_name='products')
    op.drop_table('products')
    # ### end Alembic commands ###
